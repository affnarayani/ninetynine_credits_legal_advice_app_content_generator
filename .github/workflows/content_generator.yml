name: Content Generator Workflow

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '30 18 * * *'  # Run daily at 12 AM IST (6:30 PM UTC)

jobs:
  generate-content:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Ensure we have the latest versions of Google AI libraries
          pip install --upgrade google-generativeai google-genai
          
      - name: Run blog scraper
        id: blog_scraper
        run: |
          python blog_scraper.py > scraper_output.log 2>&1
          if grep -q "No new articles found" scraper_output.log; then
            echo "new_articles_found=false" >> $GITHUB_OUTPUT
            cat scraper_output.log
          else
            echo "new_articles_found=true" >> $GITHUB_OUTPUT
            cat scraper_output.log
          fi
        
      - name: Check if new articles were found
        id: check_articles
        run: |
          if [ "${{ steps.blog_scraper.outputs.new_articles_found }}" == "false" ]; then
            echo "No new articles found. Exiting workflow successfully."
            exit 0
          else
            echo "New articles found. Continuing workflow."
          fi
        
      - name: Resize and convert images
        if: steps.blog_scraper.outputs.new_articles_found == 'true'
        run: python resize_convert_images.py
        
      - name: Process images with Gemini
        if: steps.blog_scraper.outputs.new_articles_found == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python image_processor.py
        
      - name: Summarize articles
        if: steps.blog_scraper.outputs.new_articles_found == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python article_summarizer.py
        
      - name: Generate content
        if: steps.blog_scraper.outputs.new_articles_found == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python content_generator.py
        
      - name: Checkout target repository
        if: steps.blog_scraper.outputs.new_articles_found == 'true'
        uses: actions/checkout@v4
        with:
          repository: affnarayani/legal_advice_test
          path: target_repo
          token: ${{ secrets.PAT_TOKEN }}
          
      - name: Update content.json in target repository
        if: steps.blog_scraper.outputs.new_articles_found == 'true'
        run: |
          cp content.json target_repo/content.json
          
      - name: Copy processed images to target repository
        if: steps.blog_scraper.outputs.new_articles_found == 'true'
        run: |
          mkdir -p target_repo/images
          cp -r processed_images/* target_repo/images/
          
      - name: Commit and push changes to target repository
        if: steps.blog_scraper.outputs.new_articles_found == 'true'
        working-directory: target_repo
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add content.json images/
          git commit -m "Update content and images via automated workflow"
          git push
          
      - name: Run cleaner
        if: steps.blog_scraper.outputs.new_articles_found == 'true'
        run: python cleaner.py
        
      - name: Commit changes to source repository
        if: steps.blog_scraper.outputs.new_articles_found == 'true'
        run: |
          # Configure git
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Add all changes except target_repo before modifying .gitignore
          git add --all -- ':!target_repo'
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "Update content files via automated workflow"
          else
            echo "No content changes to commit"
          fi
          
          # Now add target_repo to .gitignore to prevent future issues
          echo "target_repo/" >> .gitignore
          git add .gitignore
          git commit -m "Update .gitignore to exclude target_repo"
          
          # Push with token authentication
          git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}